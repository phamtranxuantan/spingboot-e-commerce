package com.phamtranxuantan.springboot.service;

import com.phamtranxuantan.springboot.config.OpenRouterConfig;
import com.phamtranxuantan.springboot.payloads.ProductDTO;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class OpenRouterService {

    private final OpenRouterConfig config;
    private final ProductService productService;

    @Autowired
    public OpenRouterService(OpenRouterConfig config, ProductService productService) {
        this.config = config;
        this.productService = productService;
    }
    //AI x·ª≠ l√Ω ph·∫£n h·ªìi -> chatbot 
    public String askAI(String message) {
        RestTemplate restTemplate = new RestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setBearerAuth(config.getApiKeyChatBot());

        String payload = """
                {
                  "model": "deepseek/deepseek-r1:free",
                  "messages": [
                    {
                      "role": "user",
                      "content": "%s"
                    }
                  ]
                }
                """.formatted(message);

        HttpEntity<String> request = new HttpEntity<>(payload, headers);

        ResponseEntity<String> response = restTemplate.postForEntity(config.getApiUrl(), request, String.class);
        try {
            JSONObject json = new JSONObject(response.getBody());
            return json
                    .getJSONArray("choices")
                    .getJSONObject(0)
                    .getJSONObject("message")
                    .getString("content");
        } catch (Exception e) {
            return "L·ªói x·ª≠ l√Ω ph·∫£n h·ªìi AI: " + e.getMessage();
        }
    }
    //AI x·ª≠ l√Ω ·∫£nh -> description
    public String getImageDescription(String imageUrl) {
        RestTemplate restTemplate = new RestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setBearerAuth(config.getApiKeyAIimage());

        String body = """
                {
                  "model": "meta-llama/llama-4-scout:free",
                  "messages": [{
                    "role": "user",
                    "content": [
                      {"type": "text", "text": "Vi·∫øt m√¥ t·∫£ chi ti·∫øt s·∫£n ph·∫©m trong ·∫£nh n√†y."},
                      {"type": "image_url", "image_url": {"url": "%s"}}
                    ]
                  }]
                }
                """.formatted(imageUrl);

        HttpEntity<String> request = new HttpEntity<>(body, headers);

        ResponseEntity<String> response = restTemplate.postForEntity(config.getApiUrl(), request, String.class);
        try {
            JSONObject json = new JSONObject(response.getBody());
            return json
                    .getJSONArray("choices")
                    .getJSONObject(0)
                    .getJSONObject("message")
                    .getString("content");
        } catch (Exception e) {
            return "L·ªói x·ª≠ l√Ω ph·∫£n h·ªìi AI: " + e.getMessage();
        }
    }

    public String generateSmartReply(String userMessage) {
        try {
            StringBuilder context = new StringBuilder();
            context.append("""
                    B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng th√¢n thi·ªán c·ªßa c·ª≠a h√†ng b√°n thi·∫øt b·ªã ƒëi·ªán t·ª≠ Alistyle.
                    D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë th√¥ng tin b·∫°n c√≥ th·ªÉ d√πng ƒë·ªÉ t∆∞ v·∫•n kh√°ch h√†ng:
                    """);
            // L·∫•y danh s√°ch s·∫£n ph·∫©m theo danh m·ª•c
            Map<String, List<ProductDTO>> productsByCategory = productService.getProductsGroupedByCategoryChatBot();

            // Th√™m th√¥ng tin danh m·ª•c v√† s·∫£n ph·∫©m v√†o ng·ªØ c·∫£nh
            context.append("C√°c danh m·ª•c v√† s·∫£n ph·∫©m hi·ªán c√≥:\n");
            for (String category : productsByCategory.keySet()) {
                context.append("- ").append(category).append(":\n");
                for (ProductDTO product : productsByCategory.get(category)) {
                    context.append("    ‚Ä¢ ").append(product.getProductName())
                            .append(" - ").append(String.format("%,.0fƒë", product.getPrice()))
                            .append(" - H√¨nh ·∫£nh: ").append(product.getImageProduct())
                            .append("\n");
                }
            }
            List<ProductDTO> products = productService.getAllProductsChatBot(); // inject n·∫øu ch∆∞a c√≥

            for (int i = 0; i < Math.min(products.size(), 5); i++) {
                ProductDTO product = products.get(i);
                context.append(String.format("\n- %s: %,.0fƒë - H√¨nh ·∫£nh: %s", product.getProductName(),
                        product.getPrice(), product.getImageProduct()));
            }

            context.append("\n\nN·∫øu ng∆∞·ªùi d√πng c·∫ßn th√™m s·∫£n ph·∫©m, b·∫°n c√≥ th·ªÉ g·ª£i √Ω ti·∫øp.");
            context.append(
                    "\nLu√¥n gi·ªØ th√°i ƒë·ªô th√¢n thi·ªán, t√≠ch c·ª±c v√† g·∫ßn g≈©i nh∆∞ m·ªôt nh√¢n vi√™n b√°n h√†ng chuy√™n nghi·ªáp üòä.");
            context.append("\n\nH√£y tr·∫£ l·ªùi ng∆∞·ªùi d√πng m·ªôt c√°ch th√¢n thi·ªán, t·ª± nhi√™n v√† chuy√™n nghi·ªáp.");

            String fullPrompt = String.format("""
                    %s

                    Ng∆∞·ªùi d√πng: %s
                    Tr·ª£ l√Ω:
                    """, context, userMessage);

            return askAI(fullPrompt);
        } catch (Exception e) {
            return "Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.";
        }
    }

    public String generateGeneralReply(String userMessage) {
        try {
            StringBuilder context = new StringBuilder();
            context.append("""
                    B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng th√¢n thi·ªán c·ªßa c·ª≠a h√†ng b√°n thi·∫øt b·ªã ƒëi·ªán t·ª≠ Alistyle.
                    Tuy nhi√™n hi·ªán t·∫°i b·∫°n ch∆∞a th·ªÉ truy c·∫≠p v√†o kho s·∫£n ph·∫©m c·ªßa c·ª≠a h√†ng.
                    """);
            context.append(
                    """
                            B·∫°n c√≥ th·ªÉ g·ª£i √Ω c√°c xu h∆∞·ªõng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠, c√°c thi·∫øt b·ªã ƒëi·ªán t·ª≠ ph·ªï bi·∫øn ho·∫∑c khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem c√°c s·∫£n ph·∫©m c·ª• th·ªÉ trong c·ª≠a h√†ng.
                            """);
            context.append("""
                    Lu√¥n gi·ªØ th√°i ƒë·ªô th√¢n thi·ªán, t√≠ch c·ª±c v√† g·∫ßn g≈©i nh∆∞ m·ªôt nh√¢n vi√™n b√°n h√†ng chuy√™n nghi·ªáp üòä.
                    """);

            String fullPrompt = String.format("""
                    %s

                    Ng∆∞·ªùi d√πng: %s
                    Tr·ª£ l√Ω:
                    """, context, userMessage);

            return askAI(fullPrompt);
        } catch (Exception e) {
            return "Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.";
        }
    }
}
